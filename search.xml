<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[kotlin单例模式的实现]]></title>
    <url>%2F2018%2F09%2F11%2FSingleton%2F</url>
    <content type="text"><![CDATA[稍微学过Kotlin的童鞋都应该知道，在Kotlin中可以用object关键字非常方便的实现单例模式（Singleton），具体实现方式不是本文的学习重点。 本文就用最基础的方式，用Kotlin语言来实现单例模式。 基础设置公共参数及方法： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/** * Created by mwu on 2018/9/11 * 公共常量及方法 */// 计数器@Volatilevar sum = 0// 最大线程数const val MAX_THREAD_NUM = 100000// 线程休眠时间const val MAX_SLEEP_TIME = 5000L// 统一测试执行方法fun runDemo(clzz: String) &#123; val start = System.currentTimeMillis() (1..MAX_THREAD_NUM).forEach &#123; when (clzz) &#123; "LazySingleton" -&gt; &#123; Thread &#123; LazySingleton.getInstance() &#125;.start() &#125; "SyncLazySingleton" -&gt; &#123; Thread &#123; SyncLazySingleton.getInstance() &#125;.start() &#125; "HungrySingleton" -&gt; &#123; Thread &#123; HungrySingleton.getInstance() &#125;.start() &#125; "DoubleCheckSingleton" -&gt; &#123; Thread &#123; DoubleCheckSingleton.getInstance() &#125;.start() &#125; "EnumSingleton" -&gt; &#123; // 枚举类天生线程安全 Thread &#123; EnumSingleton.INSTANCE &#125;.start() &#125; "StaticInnerSingleton" -&gt; &#123; Thread &#123; StaticInnerSingleton.getInstance() &#125;.start() &#125; else -&gt; &#123; println("Input Error") return &#125; &#125; &#125; Thread.sleep(MAX_SLEEP_TIME) val end = System.currentTimeMillis() println("类：$clzz, 计数器总和：$sum, 耗时：$&#123;end - start - MAX_SLEEP_TIME&#125;")&#125; 测试类1234567891011121314151617181920212223import org.junit.Test/** * Created by mwu on 2018/9/11 * 测试类 */class TestSingleton &#123; @Test fun test() &#123; // 单线程懒汉式 runDemo(LazySingleton::class.simpleName ?: "Error") // 同步懒汉式 runDemo(SyncLazySingleton::class.simpleName ?: "Error") // 饿汉式 runDemo(HungrySingleton::class.simpleName ?: "Error") // double-check懒汉式 runDemo(DoubleCheckSingleton::class.simpleName ?: "Error") // 静态内部类 runDemo(StaticInnerSingleton::class.simpleName ?: "Error") // 枚举 runDemo(EnumSingleton::class.simpleName ?: "Error") &#125;&#125; 饿汉式 优点：代码实现简单且线程安全缺点：由于实例是在类加载时创建，因此即便该实例不使用也会占用内存空间 1234567891011121314151617181920/** * Created by mwu on 2018/9/10 * 饿汉式：类初始化时创建 * 优点：简单 * 缺点：可被反射破坏 */class HungrySingleton private constructor() &#123; init &#123; sum++ &#125; companion object &#123; private var instance: HungrySingleton = HungrySingleton() fun getInstance(): HungrySingleton &#123; return instance &#125; &#125;&#125; 懒汉式 优点：代码简单且实现实例延迟创建缺点：多线程并发时，可能会创建出多个实例 12345678910111213141516171819202122232425/** * Created by mwu on 2018/9/10 * 懒汉式：在需要使用到类的实例时，才去创建 * 优点：简单 * 缺点：非线程安全，多线程下可能会创建多个实例 */class LazySingleton private constructor() &#123; init &#123; sum++ &#125; companion object &#123; private var instance: LazySingleton? = null fun getInstance(): LazySingleton? &#123; // 多线程下，假如此时有多个线程都判断instance == null为true // 则都会进入到if代码块中，从而创建多个实例 if (instance == null) &#123; instance = LazySingleton() &#125; return instance &#125; &#125;&#125; 同步懒汉式 优点：线程安全的懒汉式缺点：加@Synchronized注解理论上会牺牲部分性能 1234567891011121314151617181920212223242526/** * Created by mwu on 2018/9/10 * 同步的懒汉式：多线程安全 * 原理：在生成实例的方法上加@Synchronized注解，相当于Java中的synchronized关键字 * 缺点：牺牲性能--发现也没牺牲啥性能，难道是我用的方式不对？ */class SyncLazySingleton private constructor() &#123; init &#123; sum++ &#125; companion object &#123; private var instance: SyncLazySingleton? = null @Synchronized fun getInstance(): SyncLazySingleton? &#123; if (instance == null) &#123; instance = SyncLazySingleton() &#125; return instance &#125; &#125;&#125; 双重检查 优点：线程安全+延迟加载+更少的性能牺牲缺点：不加@Volatile注解时，可能因为JVM的指令重排序导致程序出错 12345678910111213141516171819202122232425262728/** * Created by mwu on 2018/9/10 * double-check的懒汉式 * 多线程安全 * 缺点：指令重排序 */class DoubleCheckSingleton &#123; init &#123; sum++ &#125; companion object &#123; @Volatile private var instance: DoubleCheckSingleton? = null fun getInstance(): DoubleCheckSingleton? &#123; if (instance == null) &#123; synchronized(this) &#123; if (instance == null) &#123; instance = DoubleCheckSingleton() &#125; &#125; &#125; return instance &#125; &#125;&#125; 静态内部类 优点：延迟加载+线程安全+使用时才创建缺点：反射 1234567891011121314151617181920212223/** * Created by mwu on 2018/9/11 * 静态内部类单例 * 优点：延迟加载+线程安全+使用时才创建 */class StaticInnerSingleton private constructor() &#123; init &#123; sum++ &#125; companion object &#123; private class SingletonHolder &#123; companion object &#123; val instance = StaticInnerSingleton() &#125; &#125; fun getInstance(): StaticInnerSingleton &#123; return SingletonHolder.instance &#125; &#125;&#125; 枚举《Effective Java》墙裂推荐！ 优点：目前最优雅，最简单，最安全的单例实现方式缺点：这么好的方法，没什么人用 12345678910/** * Created by mwu on 2018/9/10 * 枚举类单例 * 目前最优雅，最简单，最安全的单例实现方式 */enum class EnumSingleton &#123; INSTANCE; fun whareverMethod() &#123;&#125;&#125; 总结以上方法中，除了枚举外都会面临以下缺点： 需要特殊处理序列化，否则反序列化时，会创建出新的实例 可以用反射强行调用私有构造器，从而破坏单例 而枚举的单例模式则不存在以上问题，因此被《Effective Java》墙裂推荐，所以以后写单例还是用枚举吧]]></content>
      <categories>
        <category>kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
        <tag>设计模式</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo&Git搭建个人博客]]></title>
    <url>%2F2018%2F09%2F06%2FHexoGit%2F</url>
    <content type="text"><![CDATA[讲一讲我在第一次用Hexo+Git搭建个人Blog中遇到的坑 博客搭建具体的搭建过程参见旺仔的个人博客，博主对Hexo+Git搭建个人博客的过程描述的十分详细，在此不做赘述。 本文主要讲讲在基础框架搭建完毕后遇到的问题。 遇到的坑1. LeanCloud统计文章阅读量首先，我们需要知道Hexo的默认主题NexT已经集成了包括LeanCloud、不蒜子等在内的统计工具，同时，像文章字数、阅读时长、更新时间等基本功能也可以通过安装相关插件并修改配置文件实现，具体内容请自行搜索，非常简单。 在我通过网上的方法，用LeanCloud实现了文章阅读量统计显示后，发现当我刷新主页及阅读博文时，计数器都会增加，并没有达到我的需求。 随后我在网上找相关的解决方案，多数都仅仅是教你如何配置LeanCloud做统计，但是照着他们的方法，根本没有解决我的问题，于是我决定自己动手，丰衣足食。 ————– 华丽的分割线 ————– 首先，如下图，找到LeanCloud统计分析的配置文件。 然后，用文本编辑器打开后，在60行前后的位置，添加如下代码：123&#123;% if not is_home() %&#125; counter.increment(&quot;time&quot;);&#123;% endif %&#125; 于是乎，大功告成！这段代码的含义就是告诉浏览器，若当前浏览的是主页is_home()，则不对统计变量time进行增加计算。]]></content>
      <categories>
        <category>Hexo&amp;Git</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Git</tag>
        <tag>LeanCloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F09%2F04%2FHello%2F</url>
    <content type="text"><![CDATA[Welcome to Mason’s Blog! 这是我的第一篇博客！]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
</search>
